#!/usr/bin/env ruby
# frozen_string_literal: true

# Allow `require` calls relative to `lib`
$LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'dotenv/load'
require 'optimist'
require 'secret_santa/gift_exchange'
require 'secret_santa/mailer_factory'
require 'secret_santa/message_builder'

opts = Optimist.options do
  opt :csv_path, 'Path to an input CSV', type: :string, required: true
  opt :subject, 'Subject of sent messages', type: :string, required: true
  opt :body_template, 'Template to use for generated message bodies', type: :string, required: true
  opt :from_name, "The name to use for the email's from address", type: :string, required: true
  opt :from_email, "The email address to use for the email's sender", type: :string, required: true
  opt :redact, 'Redact generated assignments', type: :flag
  opt :dry_run, 'Generate assignments but do not actually send emails', type: :flag
end

body_template = File.read(opts.body_template)
from = SecretSanta::EmailAddress.new(name: opts.from_name, email: opts.from_email)
message_builder = SecretSanta::MessageBuilder.new(subject: opts.subject, body_template: body_template, from: from)

mailer = SecretSanta::MailerFactory.new(
  dry_run: opts.dry_run,
  smtp_host: ENV.fetch('SMTP_HOST'),
  smtp_port: ENV.fetch('SMTP_PORT'),
  smtp_username: ENV.fetch('SMTP_USERNAME'),
  smtp_password: ENV.fetch('SMTP_PASSWORD'),
  authtype: ENV.fetch('SMTP_AUTHTYPE').to_sym
).build

gift_exchange = SecretSanta::GiftExchange.new(
  redact_recipients: opts.redact,
  csv_path: opts.csv_path,
  mailer: mailer,
  message_builder: message_builder
)

gift_exchange.assign_and_notify

# vim: set ft=ruby
